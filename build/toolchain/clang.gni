# Clang toolchain configuration

template("clang_toolchain") {
  toolchain(target_name) {
    forward_variables_from(invoker, "*")

    cc = "clang"
    cxx = "clang++"
    ar = "ar"
    ld = cxx

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC {{output}}"
      outputs = [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
    }

    tool("alink") {
      command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
      description = "AR {{target_output_name}}{{output_extension}}"
      outputs = [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"
      sofile = "{{output_dir}}/$soname"
      command = "$ld -shared {{ldflags}} {{inputs}} {{solibs}} {{libs}} -o $sofile"
      description = "SOLINK $soname"
      outputs = [ sofile ]
      default_output_extension = ".so"
      output_prefix = "lib"
    }

    tool("link") {
      outfile = "{{target_output_name}}{{output_extension}}"
      command = "$ld {{ldflags}} {{inputs}} {{solibs}} {{libs}} -o $outfile"
      description = "LINK $outfile"
      outputs = [ outfile ]
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy") {
      command = "cp -af {{source}} {{output}}"
      description = "COPY {{source}} {{output}}"
    }

    toolchain_args = {
      current_cpu = invoker.cpu
      current_os = invoker.os
    }
  }
}

clang_toolchain("clang") {
  cpu = "x64"
  os = "linux"
}
